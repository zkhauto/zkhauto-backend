import express from "express";
import Car from "../models/Car.js";

const router = express.Router();

// GET route to fetch all cars
router.get("/cars", async (req, res) => {
  try {
    console.log('Fetching all cars...');
    const cars = await Car.find({});
    console.log(`Found ${cars.length} cars`);
    console.log('Car brands:', cars.map(car => car.brand));
    res.status(200).json(cars);
  } catch (error) {
    console.error("Error fetching cars:", error);
    res.status(500).json({ error: "Failed to fetch cars", message: error.message });
  }
});

// GET route to fetch car details by ID
router.get("/car/:id", async (req, res) => {
  try {
    const car = await Car.findById(req.params.id);
    if (!car) {
      return res.status(404).json({ message: "Car not found" });
    }
    res.status(200).json(car);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch car details", message: error.message });
  }
});

// POST route to add a new car
router.post("/cars", async (req, res) => {
  try {
    const carData = { ...req.body };
    
    // Default to 2 images as most cars have 2 images
    const numberOfImages = req.body.numberOfImages || 2;
    carData.images = Array.from({ length: numberOfImages }, () => ({ 
      url: '',  // URL will be generated by the getter
      exists: true 
    }));

    const car = new Car(carData);
    const savedCar = await car.save();
    res.status(201).json(savedCar);
  } catch (error) {
    res.status(500).json({ error: "Failed to add car", message: error.message });
  }
});

// PUT route to update car details
router.put("/car/:id", async (req, res) => {
  try {
    const car = await Car.findById(req.params.id);
    if (!car) {
      return res.status(404).json({ message: "Car not found" });
    }

    // Update the number of images if specified
    if (req.body.numberOfImages) {
      const numberOfImages = req.body.numberOfImages;
      car.images = Array.from({ length: numberOfImages }, () => ({ 
        url: '', 
        exists: true 
      }));
    }

    // Update other fields
    Object.keys(req.body).forEach(key => {
      if (key !== 'numberOfImages' && key !== 'images') {
        car[key] = req.body[key];
      }
    });

    const updatedCar = await car.save();
    res.status(200).json(updatedCar);
  } catch (error) {
    res.status(500).json({ error: "Failed to update car", message: error.message });
  }
});

// DELETE route to remove a car
router.delete("/car/:id", async (req, res) => {
  try {
    const car = await Car.findByIdAndDelete(req.params.id);
    if (!car) {
      return res.status(404).json({ message: "Car not found" });
    }
    res.status(200).json({ message: "Car deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: "Failed to delete car", message: error.message });
  }
});

export default router;